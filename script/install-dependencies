#!/usr/bin/env bash
# -*- ENCODING: UTF-8 -*-
#
# Copyright (c) 2015 Nelson Martell (http://nelson6e65.github.io)
#
# Licensed under The MIT License (MIT)
#
# For full copyright and license information, please see the LICENSE
# Redistributions of files must retain the above copyright notice.
#

if [[ -z $SCRIPT_DIR ]]; then
    # Current file directory
    declare -xr SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
fi

if [[ -z $ROOT_DIR ]]; then
    # Root directory
    declare -xr ROOT_DIR=$(dirname "$SCRIPT_DIR")
fi

. "$ROOT_DIR/config/init"

# Return value
declare -i errores=$E_NONE

echo_separator '_'
echo_separator '='
echo_header "Install Atom requirements"
echo_separator '='; echo

alert_debug "Installing Atom requirements..." "Fedora Atom Builder"

echo "This will take a few minutes."
echo "You only will be disturbed for a password or if an error occurrs."; echo

echo; echo_header "Get build dependencies" '-'

sudo dnf -y install make gcc gcc-c++ glibc-devel libgnome-keyring-devel rpmdevtools

if [[ $? -eq 0 ]]; then
    show_success "Build dependencies are already installed or were installed sucessfully." \
        "Build dependencies installed sucessfully!"
else
    show_error "Failed to install some build dependencies. Retry." \
        "Unable to install some build dependencies!"
    errores=$((errores | E_INSTALL_DEP))
fi

echo; echo_header "Checking git" '-';

is_installed "git"

declare -a git_full_version=

if [[ $? -eq 0 ]]; then
    git_full_version=($(git --version))
    git_version="${git_full_version[-1]}"
    show_success "Git ${git_version} is already installed." \
        "Checking Git:"
else
    sudo dnf -y install git

    if [[ $? -eq 0 ]]; then
        git_full_version=($(git --version))
        git_version="${git_full_version[-1]}"
        show_success "Git ${git_version} was installed sucessfully." \
            "Git installed sucessfully!"
    else
        show_error "Failed to install Git." \
            "Unable to install Git!"
        errores=$((errores | E_INSTALL_GIT))
    fi
fi

echo; echo_header "Checking Node.js" '-'

is_installed "npm" && is_installed "node"

if [[ $? -eq 0 ]]; then
    npm_version=$(npm --version)
    node_version=$(node --version)
    message="npm ${npm_version} is already installed."
    message+="\nNode ${node_version} is already installed."
    message+="\nNote: npm >= 1.4 is required."
    show_success "${message}" "Checking Node.js:"
else
    # Auto install npm is disabled since v0.3.0
    message="To install Node.js and npm, follow this instructions:"
    message+="  https://docs.npmjs.com/getting-started/installing-node"
    show_error "${message}" "Node.js and npm are not installed!"

    errores=$((errores | E_INSTALL_NODE))
fi


echo_header "Checking bower" '-'; echo

is_installed "bower"

if [[ $? -eq 0 ]]; then
    bower_version=$(bower --version)
    show_success "Bower ${bower_version} is already installed." \
        "Checking Bower:"
else
    is_installed "npm" && sudo npm install bower -g

    if [[ $? -eq 0 ]]; then
        bower_version=$(bower --version)
        show_success "Bower ${bower_version} was installed sucessfully." \
            "Bower installed sucessfully!"
    else
        show_error "Failed to install Bower." \
            "Unable to install Bower!"
        errores=$((errores | E_INSTALL_BOWER))
    fi
fi

echo_separator '_'; echo

exit $errores
